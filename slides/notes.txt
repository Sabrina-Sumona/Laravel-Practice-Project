# Enter ! + Tab for creating html
--------------------------------------------------------------------------------
# to install Laravel:
// >  composer create-project laravel/laravel {directory} 4.2 --prefer-dist
> composer create-project laravel/laravel LaravelProject1 7.x --prefer-dist
> composer create-project laravel/laravel {directory} "5.0.*" --prefer-dist
> composer create-project laravel/laravel Laravel_Ecommerce_Project "8.*"--prefer-dist
> composer create-project --prefer-dist laravel/laravel:^7.0 blog
> composer create-project --prefer-dist laravel/laravel:^8.* face_c
lone
--------------------------------------------------------------------------------
# to run Laravel:
>  php artisan serve
> php artisan serve --port=8080
--------------------------------------------------------------------------------
# var pass & loop structures
      <!-- var pass -->
      <!-- <h1>{{$name}}</h1> -->

      <!-- For each loop -->
      <!-- @foreach($products as $product)
         <h1>{{$product}}</h1>
      @endforeach -->

      <!-- For loop -->
      <!-- @for($i=0; $i<3; $i++)
          <h1>{{$products[$i]}}</h1>
      @endfor -->
--------------------------------------------------------------------------------
# route parameters:
1. query parameter (in url after question mark)
2. route parameter (in url after /)

# example:
http://127.0.0.1:8000/home/9631/23?username=sumu
--------------------------------------------------------------------------------
# route methods:
1. get (we use for all operations and shows details in URL)
2. post (we use for all operations but does not show details in URL)
3. put (we use to update)
4. delete (we use to delete)
5. patch (we dont use much generally)
6. option (we dont use much generally)
--------------------------------------------------------------------------------
# controller creation commands:
>php artisan make:controller HomeController
--------------------------------------------------------------------------------
# after applying changes:
>php artisan optimize:clear
--------------------------------------------------------------------------------
# migration 7 commands:
>php artisan migrate
>php artisan migrate:install
>php artisan migrate:rollback
>php artisan migrate:reset
>php artisan migrate:fresh
>php artisan migrate:refresh
>php artisan migrate:status
--------------------------------------------------------------------------------
# for create migration file for creating 'products' table:
>php artisan make:migration create_products_table

# then edit the migration to add more cols

# check status:
>php artisan migrate:status

# and Run to migrate:
>php artisan migrate
--------------------------------------------------------------------------------
# after adding more tables in 'products' table:
>php artisan migrate:rollback

# to rollback the last migration
php artisan migrate:rollback --step=1

# check status:
>php artisan migrate:status

# and Run to migrate:
>php artisan migrate
--------------------------------------------------------------------------------
# if we rollback with data the data will be vanished, for that we can create new migration

>php artisan make:migration add_color_to_products_table

# then edit the migration to add more cols

# check status:
>php artisan migrate:status

# and Run to migrate:
>php artisan migrate
--------------------------------------------------------------------------------
# the color col will be added at last, if we want it before timestamps we need to cut & paste timestamps part after the color

# then we need to refresh:
>php artisan migrate:refresh
--------------------------------------------------------------------------------
# for creating model file for 'products' table:
>php artisan make:model Product

# for creating model file for 'users' table:
>php artisan make:model User
--------------------------------------------------------------------------------
# Resource controller:
php artisan make:controller UserController --resource

# Resource controller & Model:
//>php artisan make:controller PhotoController --resource --model=Photo

# for laravel 8 or more
>php artisan make:controller ProductController --resource --model=Product

# for less than laravel 8
>php artisan make:controller ProductController --resource --model=Models\Product
--------------------------------------------------------------------------------
# for adding multiple products
<input type="file" name="images[]" multiple>
--------------------------------------------------------------------------------
# pagination:
> php artisan vendor:publish --tag=la
ravel-pagination
--------------------------------------------------------------------------------
# Installing External Cart Package
> composer require olimortimer/laravelshoppingcart

# open your config/app.php file. Add a new line to the providers array:
> Gloudemans\Shoppingcart\ShoppingcartServiceProvider::class,

# And optionally add a new line to the aliases array:
> 'Cart' => Gloudemans\Shoppingcart\Facades\Cart::class,

# Usage - Cart::add() :

// > Cart::add('293ad', 'Product 1', 1, 9.99);
> Cart::add($id, $name, $quantity, $price);

// > Cart::add('293ad', 'Product 1', 1, 9.99, ['size' => 'large']);
> Cart::add($id, $name, $quantity, $price, ['size' => $size]);

// > Cart::add(['id' => '293ad', 'name' => 'Product 1', 'qty' => 1, 'price' => 9.99, 'options' => ['size' => 'large']]);
> Cart::add($id, $name, $quantity, $price, ['size' => $size, 'image'=>$image, 'total'=> $total]);

# Usage - Cart::update()

// > Cart::update($rowId, 2); // Will update the quantity

// > Cart::update($rowId, ['name' => 'Product 1']); // Will update the name
// > Cart::update($rowId, $product); // Will update the id, name and price

> Cart::update($cart->rowId, ['qty'=>$quantity, 'options'=> ['size' => $size, 'image'=>$image, 'total'=> $total]]);

# Usage - Cart::remove()

> Cart::remove($rowId);
--------------------------------------------------------------------------------
# Custom middleware
> php artisan make:middleware CheckUser
--------------------------------------------------------------------------------
# For Sending Email as REST edit .env file
MAIL_HOST=smtp.googlemail.com
MAIL_PORT=465
MAIL_USERNAME=snsbauet04@gmail.com//receiver
MAIL_PASSWORD=naorin540
MAIL_ENCRYPTION=ssl
MAIL_FROM_ADDRESS=snsbauet04@gmail.com//sender
--------------------------------------------------------------------------------
# for creating mail file:
> php artisan make:mail te
stmail
--------------------------------------------------------------------------------
#send reset password email:
http://localhost:8000/api/send-email?email=snsbauet04@gmail.com
--------------------------------------------------------------------------------
# Install the laravel/ui Composer package:
> composer require laravel/ui:^2.*
> php artisan ui vue --auth
--------------------------------------------------------------------------------
# Laravel 5.7, Laravel 5.8, Laravel 6.0, Laravel 7.0, and Laravel 8.0 (note a minor bc change in 6.0 to the email verification route):

// Authentication Routes...
Route::get('login', 'Auth\LoginController@showLoginForm')->name('login');
Route::post('login', 'Auth\LoginController@login');
Route::post('logout', 'Auth\LoginController@logout')->name('logout');

// Registration Routes...
Route::get('register', 'Auth\RegisterController@showRegistrationForm')->name('register');
Route::post('register', 'Auth\RegisterController@register');

// Password Reset Routes...
Route::get('password/reset', 'Auth\ForgotPasswordController@showLinkRequestForm')->name('password.request');
Route::post('password/email', 'Auth\ForgotPasswordController@sendResetLinkEmail')->name('password.email');
Route::get('password/reset/{token}', 'Auth\ResetPasswordController@showResetForm')->name('password.reset');
Route::post('password/reset', 'Auth\ResetPasswordController@reset')->name('password.update');

// Confirm Password (added in v6.2)
Route::get('password/confirm', 'Auth\ConfirmPasswordController@showConfirmForm')->name('password.confirm');
Route::post('password/confirm', 'Auth\ConfirmPasswordController@confirm');

// Email Verification Routes...
Route::get('email/verify', 'Auth\VerificationController@show')->name('verification.notice');
Route::get('email/verify/{id}/{hash}', 'Auth\VerificationController@verify')->name('verification.verify'); // v6.x
/* Route::get('email/verify/{id}', 'Auth\VerificationController@verify')->name('verification.verify'); // v5.x */
Route::get('email/resend', 'Auth\VerificationController@resend')->name('verification.resend');
